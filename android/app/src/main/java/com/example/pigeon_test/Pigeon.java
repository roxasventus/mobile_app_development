// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PigeonUserDetails {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable Long age;
    public @Nullable Long getAge() { return age; }
    public void setAge(@Nullable Long setterArg) {
      this.age = setterArg;
    }

    public static class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable Long age;
      public @NonNull Builder setAge(@Nullable Long setterArg) {
        this.age = setterArg;
        return this;
      }
      public @NonNull PigeonUserDetails build() {
        PigeonUserDetails pigeonReturn = new PigeonUserDetails();
        pigeonReturn.setName(name);
        pigeonReturn.setAge(age);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("age", age);
      return toMapResult;
    }
    static @NonNull PigeonUserDetails fromMap(@NonNull Map<String, Object> map) {
      PigeonUserDetails pigeonResult = new PigeonUserDetails();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object age = map.get("age");
      pigeonResult.setAge((age == null) ? null : ((age instanceof Integer) ? (Integer)age : (Long)age));
      return pigeonResult;
    }
  }
  private static class PigeonApiCodec extends StandardMessageCodec {
    public static final PigeonApiCodec INSTANCE = new PigeonApiCodec();
    private PigeonApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PigeonUserDetails.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PigeonUserDetails) {
        stream.write(128);
        writeValue(stream, ((PigeonUserDetails) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PigeonApi {
    @Nullable PigeonUserDetails getUserDetails(String uid);

    /** The codec used by PigeonApi. */
    static MessageCodec<Object> getCodec() {
      return PigeonApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PigeonApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PigeonApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonApi.getUserDetails", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uidArg = (String)args.get(0);
              if (uidArg == null) {
                throw new NullPointerException("uidArg unexpectedly null.");
              }
              PigeonUserDetails output = api.getUserDetails(uidArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
